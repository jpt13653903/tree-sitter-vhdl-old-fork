#ifndef TokenType_h
#define TokenType_h
//------------------------------------------------------------------------------

typedef enum TokenTypeTag{
    IDENTIFIER,

    RESERVED_ABS,
    RESERVED_ACCESS,
    RESERVED_AFTER,
    RESERVED_ALIAS,
    RESERVED_ALL,
    RESERVED_AND,
    RESERVED_ARCHITECTURE,
    RESERVED_ARRAY,
    RESERVED_ASSERT,
    RESERVED_ASSUME,
    RESERVED_ASSUME_GUARANTEE,
    RESERVED_ATTRIBUTE,
    RESERVED_BEGIN,
    RESERVED_BLOCK,
    RESERVED_BODY,
    RESERVED_BUFFER,
    RESERVED_BUS,
    RESERVED_CASE,
    RESERVED_COMPONENT,
    RESERVED_CONFIGURATION,
    RESERVED_CONSTANT,
    RESERVED_CONTEXT,
    RESERVED_COVER,
    RESERVED_DEFAULT,
    RESERVED_DISCONNECT,
    RESERVED_DOWNTO,
    RESERVED_ELSE,
    RESERVED_ELSIF,
    RESERVED_END,
    RESERVED_ENTITY,
    RESERVED_EXIT,
    RESERVED_FAIRNESS,
    RESERVED_FILE,
    RESERVED_FOR,
    RESERVED_FORCE,
    RESERVED_FUNCTION,
    RESERVED_GENERATE,
    RESERVED_GENERIC,
    RESERVED_GROUP,
    RESERVED_GUARDED,
    RESERVED_IF,
    RESERVED_IMPURE,
    RESERVED_IN,
    RESERVED_INERTIAL,
    RESERVED_INOUT,
    RESERVED_IS,
    RESERVED_LABEL,
    RESERVED_LIBRARY,
    RESERVED_LINKAGE,
    RESERVED_LITERAL,
    RESERVED_LOOP,
    RESERVED_MAP,
    RESERVED_MOD,
    RESERVED_NAND,
    RESERVED_NEW,
    RESERVED_NEXT,
    RESERVED_NOR,
    RESERVED_NOT,
    RESERVED_NULL,
    RESERVED_OF,
    RESERVED_ON,
    RESERVED_OPEN,
    RESERVED_OR,
    RESERVED_OTHERS,
    RESERVED_OUT,
    RESERVED_PACKAGE,
    RESERVED_PARAMETER,
    RESERVED_PORT,
    RESERVED_POSTPONED,
    RESERVED_PROCEDURE,
    RESERVED_PROCESS,
    RESERVED_PROPERTY,
    RESERVED_PROTECTED,
    RESERVED_PURE,
    RESERVED_RANGE,
    RESERVED_RECORD,
    RESERVED_REGISTER,
    RESERVED_REJECT,
    RESERVED_RELEASE,
    RESERVED_REM,
    RESERVED_REPORT,
    RESERVED_RESTRICT,
    RESERVED_RESTRICT_GUARANTEE,
    RESERVED_RETURN,
    RESERVED_ROL,
    RESERVED_ROR,
    RESERVED_SELECT,
    RESERVED_SEQUENCE,
    RESERVED_SEVERITY,
    RESERVED_SIGNAL,
    RESERVED_SHARED,
    RESERVED_SLA,
    RESERVED_SLL,
    RESERVED_SRA,
    RESERVED_SRL,
    RESERVED_STRONG,
    RESERVED_SUBTYPE,
    RESERVED_THEN,
    RESERVED_TO,
    RESERVED_TRANSPORT,
    RESERVED_TYPE,
    RESERVED_UNAFFECTED,
    RESERVED_UNITS,
    RESERVED_UNTIL,
    RESERVED_USE,
    RESERVED_VARIABLE,
    RESERVED_VMODE,
    RESERVED_VPROP,
    RESERVED_VUNIT,
    RESERVED_WAIT,
    RESERVED_WHEN,
    RESERVED_WHILE,
    RESERVED_WITH,
    RESERVED_XNOR,
    RESERVED_XOR,

    RESERVED_END_MARKER, // Internal use only

    DELIMITER_AMPERSAND,
    DELIMITER_TICK,
    DELIMITER_LEFT_PARENTHESIS,
    DELIMITER_RIGHT_PARENTHESIS,
    DELIMITER_MULTIPLY,
    DELIMITER_PLUS_SIGN,
    DELIMITER_COMMA,
    DELIMITER_MINUS_SIGN,
    DELIMITER_DOT,
    DELIMITER_DIVIDE,
    DELIMITER_COLON,
    DELIMITER_SEMICOLON,
    DELIMITER_LESS_THAN_SIGN,
    DELIMITER_EQUALS_SIGN,
    DELIMITER_GREATER_THAN_SIGN,
    DELIMITER_GRAVE_ACCENT,
    DELIMITER_VERTICAL_BAR,
    DELIMITER_LEFT_SQUARE_BRACKET,
    DELIMITER_RIGHT_SQUARE_BRACKET,
    DELIMITER_QUESTION_MARK,
    DELIMITER_COMMERCIAL_AT,

    DELIMITER_ARROW,
    DELIMITER_CIRCUMFLEX,
    DELIMITER_EXPONENTIATE,
    DELIMITER_VARIABLE_ASSIGNMENT,
    DELIMITER_INEQUALITY,
    DELIMITER_GREATER_THAN_OR_EQUAL,
    DELIMITER_LESS_THAN_OR_EQUAL,
    DELIMITER_SIGNAL_ASSIGNMENT,
    DELIMITER_BOX,
    DELIMITER_CONDITION_CONVERSION,
    DELIMITER_MATCHING_EQUALITY,
    DELIMITER_MATCHING_INEQUALITY,
    DELIMITER_MATCHING_LESS_THAN,
    DELIMITER_MATCHING_LESS_THAN_OR_EQUAL,
    DELIMITER_MATCHING_GREATER_THAN,
    DELIMITER_MATCHING_GREATER_THAN_OR_EQUAL,
    DELIMITER_DOUBLE_LESS_THAN,
    DELIMITER_DOUBLE_GREATER_THAN,

    DELIMITER_END_MARKER, // Internal use only

    TOKEN_DECIMAL_LITERAL,
    TOKEN_DECIMAL_LITERAL_FLOAT,
    TOKEN_BASED_LITERAL,
    TOKEN_BASED_LITERAL_FLOAT,
    TOKEN_CHARACTER_LITERAL,
    TOKEN_STRING_LITERAL,
    TOKEN_BIT_STRING_LITERAL,
    TOKEN_COMMENT,
    TOKEN_TOOL_DIRECTIVE,
    TOKEN_TOOL_DIRECTIVE_STANDARD,
    TOKEN_TOOL_DIRECTIVE_COMMON,

    TOKEN_END_MARKER, // Internal use only

    ATTRIBUTE_FUNCTION,
    ATTRIBUTE_PURE_FUNCTION,
    ATTRIBUTE_RANGE,
    ATTRIBUTE_SIGNAL,
    ATTRIBUTE_SUBTYPE,
    ATTRIBUTE_TYPE,
    ATTRIBUTE_VALUE,

    LIBRARY_ATTRIBUTE,
    LIBRARY_CONSTANT,
    LIBRARY_CONSTANT_BOOLEAN,
    LIBRARY_FUNCTION,
    LIBRARY_TYPE,

    ERROR_SENTINEL,

    // For internal use only...
    COMMENT_LINE_START,
    COMMENT_BLOCK_START,

    BASE_SPECIFIER_BINARY,
    BASE_SPECIFIER_OCTAL,
    BASE_SPECIFIER_DECIMAL,
    BASE_SPECIFIER_HEX,

    // Used to handle identifier corner cases
    IDENTIFIER_EXPECTING_LETTER
} TokenType;
//------------------------------------------------------------------------------

const char* token_type_to_string(TokenType type);

bool can_be_identifier   (TokenType type);
bool can_start_identifier(TokenType type);
bool is_base_specifier   (TokenType type);
//------------------------------------------------------------------------------

#endif
//------------------------------------------------------------------------------
